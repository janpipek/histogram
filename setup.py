import os

from setuptools import setup, find_packages
from codecs import open
from os import path
from subprocess import Popen, PIPE

VERSION = 2,0,0
ISRELEASE = False

def long_description():
    here = path.abspath(path.dirname(__file__))
    with open(path.join(here, 'README.rst'), encoding='utf-8') as f:
        return f.read()

# Return the git revision as a string
def git_revision():
    def _minimal_ext_cmd(cmd):
        # construct minimal environment
        env = {}
        for k in ['SYSTEMROOT', 'PATH']:
            v = os.environ.get(k)
            if v is not None:
                env[k] = v
        # LANGUAGE is used on win32
        env['LANGUAGE'] = 'C'
        env['LANG'] = 'C'
        env['LC_ALL'] = 'C'
        out = Popen(cmd, stdout=PIPE, env=env).communicate()[0]
        return out
    try:
        out = _minimal_ext_cmd(['git', 'rev-parse', 'HEAD'])
        GIT_REVISION = out.strip().decode('ascii')
    except OSError:
        GIT_REVISION = "Unknown"

    return GIT_REVISION
    
def write_version_py(filename='histogram/version.py'):
    fmt = """\
# This file generated by setup.py
version = '{ver[0]}.{ver[1]}.{ver[2]}'
git_revision = '{gitrev}'
full_version = version+'r'+git_revision
release = {isrel}
if not release:
    version = full_version
"""
    opts = dict(
        ver = VERSION,
        gitrev = git_revision(),
        isrel = ISRELEASE)
        
    with open(filename,'w') as fout:
        fout.write(fmt.format(**opts))    

def ensure_numpy_is_installed():
    try:
        import numpy
    except ImportError:
        proc = Popen('pip install numpy',
            shell=True,
            #executable=os.envron.get('SHELL','/bin/bash'),
            env=os.environ,
            stdout=PIPE,
            stderr=PIPE)
        out,err = proc.communicate()
        if proc.returncode:
            print(err)
            print('''\
Error installing numpy.

Fedora:
    dnf install atlas-devel gcc-{c++,gfortran} subversion redhat-rpm-config
Ubuntu:
    apt-get install ...
''')
            sys.exit(1)
        

def build_setup():
    # Versions should comply with PEP440.  For a discussion on single-sourcing
    # the version across setup.py and the project code, see
    # https://packaging.python.org/en/latest/single_source_version.html
    
    # You can just specify the packages manually if your project is
    # simple. Or you can use find_packages().
    
    # List run-time dependencies with setup_requires and install_requires.
    # These will be installed by pip when your project is installed. For an
    # analysis of "install_requires" vs pip's requirements files see:
    # https://packaging.python.org/en/latest/requirements.html
    #
    # for numpy/scipy on Fedora 23:
    # for extras on Fedora 23:
    #		sudo dnf install {freetype,libpng,hdf5}-devel root-{python,python3}
    #       pip install matplotlib h5py tables pyroot
    #
    # at the time of testing, Flask's pypi configuration was broken
    # which prevented bokeh from being installed through pip
    #
    # I installed PySide using pip and used Qt4Agg backend for matplotlib
    # to work in the virtual environment.
    
    # List additional groups of dependencies here (e.g. development
    # dependencies). You can install these using the following syntax,
    # for example:
    # $ pip install -e .[dev,test]
    
    # To provide executable scripts, use entry points in preference to the
    # "scripts" keyword. Entry points provide cross-platform support and allow
    # pip to create the appropriate form of executable for the target platform.
    #entry_points={
    #    'console_scripts': [
    #        'sample=sample:main',
    #    ],
    #},

    opts = dict(
        name='histogram',
        version='.'.join(str(x) for x in VERSION),
        description='A histogram object for scientific data-reduction and statistical analysis',
        long_description=long_description(),
        url='https://github.com/theodoregoetz/histogram',
        author='Johann T. Goetz',
        author_email='theodore.goetz+histogram@gmail.com',
        license='GPLv3',
        classifiers=[
            # Development Status
            #   3 - Alpha
            #   4 - Beta
            #   5 - Production/Stable
            'Development Status :: 4 - Beta',
            'Intended Audience :: Developers',
            'Intended Audience :: Education',
            'Intended Audience :: End Users/Desktop',
            'Intended Audience :: Financial and Insurance Industry',
            'Intended Audience :: Information Technology',
            'Intended Audience :: Science/Research',
            'Operating System :: OS Independent',
            'Topic :: Education',
            'Topic :: Scientific/Engineering',
            'Topic :: Scientific/Engineering :: Information Analysis',
            'Topic :: Scientific/Engineering :: Mathematics',
            'Topic :: Scientific/Engineering :: Physics',
            'Topic :: Scientific/Engineering :: Visualization',
            'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
            'Programming Language :: Python :: 2',
            #'Programming Language :: Python :: 2.6',
            'Programming Language :: Python :: 2.7',
            'Programming Language :: Python :: 3',
            #'Programming Language :: Python :: 3.2',
            #'Programming Language :: Python :: 3.3',
            'Programming Language :: Python :: 3.4',
            #'Programming Language :: Python :: 3 :: Only',
        ],
        keywords= [
            'histogram',
            'reduction',
            'data reduction',
            'data analysis',
            'scientific',
            'scientific computing',
            'statistics',
            'visualization',
        ],
        packages=find_packages(exclude=['contrib', 'docs', 'tests*']),
        install_requires=['numpy','scipy'],
        extras_require={
            'test': ['coverage','nose'],
            'all' : ['matplotlib','cycler','bokeh','h5py'],
        },
    )

    setup(**opts)

if __name__ == '__main__':
    # BEFORE importing distutils, remove MANIFEST. distutils doesn't properly
    # update it when the contents of directories change.
    if path.exists('MANIFEST'):
        os.remove('MANIFEST')
        
    ensure_numpy_is_installed()
    write_version_py()
    build_setup()
